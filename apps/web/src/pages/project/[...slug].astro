---
import { getCollection } from "astro:content";

import HMFLayout from "~/layouts/hmf-layout.astro";
import Heading from "~/components/common/heading.astro";
import Link from "~/components/common/link.astro";
import Icon from "~/components/common/icon.astro";
import { mod } from "~/utils/math";

import MDXLink from "./_components/mdx-link.astro";
import Paragraph from "./_components/mdx-paragraph.astro";
import Section from "./_components/mdx-section.astro";
import Ul from "./_components/mdx-ul.astro";
import MDXFigure from "./_components/mdx-figure.astro";

import type { GetStaticPaths, ImageMetadata, InferGetStaticPropsType } from "astro";

export const getStaticPaths = (async () => {
	const projects = await getCollection("projects");
	
	return projects.map((project, i) => {
		return {
			params: {
				slug: project.slug
			},
			props: {
				project,
				nextProject: projects[mod(i + 1, projects.length)],
				prevProject: projects[mod(i - 1, projects.length)]
			}
		};
	});
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { project, nextProject, prevProject } = Astro.props;

const { render } = project;
const { title, description, year, cover } = project.data;

const { Content } = await render();

function isValidOpenGraphImage(format: ImageMetadata["format"]): format is "jpeg" {
	return ["jpg", "jpeg"].includes(format);
}

if (!isValidOpenGraphImage(cover.image.format)) {
	throw new Error(`Cover photo should be in jpeg format. Found: '${cover.image.format}'.`);
}
---

<HMFLayout
	classNames={{
		main: "px-lg lg:px-2xl pt-[6rem] max-w-content mx-auto"
	}}
	title={{
		default: `Pavel Sušický — ${title}`
	}}
	image={{
		og: {
			url: cover.image.src,
			width: cover.image.width,
			height: cover.image.height,
			alt: cover.alt,
			type: `image/${cover.image.format}`
		},
		twitter: {
			url: cover.image.src,
			alt: cover.alt,
		}
	}}
	card="summary_large_image"
	description={{
		default: description
	}}>
	<article class="flex flex-col gap-2xl">
		<header class="flex flex-col gap-md">
			<h1>{title}</h1>
			<time class="font-bold uppercase" datetime={year.toString()}>Made in {year}</time>
		</header>
		<Content components={{
			a: MDXLink,
			p: Paragraph,
			section: Section,
			ul: Ul,
			h1: Heading,
			h2: Heading,
			h3: Heading,
			h4: Heading,
			h5: Heading,
			h6: Heading,
			img: MDXFigure
		}} />
		<footer>
			<ul class="flex max-w-[64rem] flex-col gap-lg lg:flex-row">
				{prevProject ? (
					<li class="grow basis-1/2">
						<p class="p-lg text-center">Previous project</p>
						<Link href={`/project/${prevProject.slug}`} type="btn" kind="secondary">
							<Icon>
								<path d="M12.707 17.293 8.414 13H18v-2H8.414l4.293-4.293-1.414-1.414L4.586 12l6.707 6.707z" />
							</Icon>
							{prevProject.data.title}
						</Link>
					</li>
				) : null}
				{nextProject ? (
					<li class="grow basis-1/2">
						<p class="p-lg text-center">Next project</p>
						<Link href={`/project/${nextProject.slug}`} type="btn" kind="secondary">
							{nextProject.data.title}
							<Icon>
								<path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z" />
							</Icon>
						</Link>
					</li>
				) : null}
			</ul>
		</footer>
	</article>
</HMFLayout>

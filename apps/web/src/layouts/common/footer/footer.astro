---
import { graphql } from "@octokit/graphql";

import Link from "~/components/common/link.astro";
import FooterDisclosure, { type Props as IFooterDisclosure } from "./footer-disclosure.astro";

import type { GitHubReleaseResponse } from "~/mocks/github";

export const footer: IFooterDisclosure[] = [
	{
		heading: "Links",
		links: [
			{ name: "Home", href: "/" },
			{ name: "Licence", href: "/legal.txt" },
			{ name: "Sitemap", href: "/sitemap-index.xml" }
		]
	},
	{
		heading: "Socials",
		links: [
			{ name: "Dev.to", href: "https://dev.to/susickypavel" },
			{ name: "Figma", href: "https://figma.com/@susickypavel" },
			{ name: "GitHub", href: "https://github.com/susickypavel" },
			{ name: "LinkedIn", href: "https://www.linkedin.com/in/susickypavel" },
			{ name: "X (Twitter)", href: "https://twitter.com/susickypavel" },
		]
	},
	{
		heading: "Other",
		links: [
			{ name: "Résumé", href: "/documents/pavel-sušický-résumé.pdf" },
			{ name: "API", href: "https://api.frontendista.cz" },
			{ name: "Bug report", href: "https://github.com/frontendista/frontendista.cz/issues/new/choose" },
			{ name: "Source code", href: "https://github.com/frontendista/frontendista.cz" }
		]
	}
];

const { repository } = await graphql<GitHubReleaseResponse>({
	headers: {
		authorization: `token ${import.meta.env.GITHUB_PERSONAL_TOKEN}`
	},
	query: `
		query getLatestRelease {
			repository(owner: "frontendista", name: "frontendista.cz") {
				latestRelease {
					tagName
					createdAt
					tagCommit {
						oid
					},
					url
				}
			}
		}
	`
});

const { createdAt, tagCommit, tagName, url } = repository.latestRelease;
---

<footer class="mx-auto mt-lg max-w-content p-lg pt-0 lg:mt-xl lg:p-2xl lg:pt-0">
	<ul class="flex grid-cols-3 flex-col gap-lg border-t-2 border-t-primary/10 pt-lg lg:grid lg:pt-xl">
		{footer.map(section => (
			<li>
				<FooterDisclosure {...section} />
			</li>
		))}
	</ul>
	<p class="mt-lg flex grid-cols-[1fr_3rem_1fr] flex-col gap-lg border-t-2 border-t-primary/10 pt-lg text-center lg:mt-xl lg:grid lg:pt-2xl">
		<Link class="self-center justify-self-start" href={url}>{tagName.split("@")[1]}@{tagCommit.oid.substring(0, 7)} on <time datetime={createdAt}>{new Date(createdAt).toLocaleString("en-US", { month: "short", year: "numeric", day: "numeric" })}</time></Link>
		<a class="order-1 max-w-[3rem] self-center justify-self-center lg:order-none" href="/">
			<span class="sr-only">Back to top</span>
			<img src="/favicon.svg" width="48" height="48" alt="">
		</a>
		<span class="self-center justify-self-end">2023 &copy; made with <Link kind="text" href="/music">music</Link>{" "}<span class="whitespace-nowrap font-bold">Pavel Sušický</span></span>
	</p>
</footer>

<script>
	const disclosureParent = document.querySelector("body > footer") as HTMLElement;

	function open() {
		disclosureParent.querySelectorAll("details").forEach(disclosure => {
			disclosure.setAttribute("open", "");
		});
	}

	function close() {
		disclosureParent.querySelectorAll("details").forEach(disclosure => {
			disclosure.removeAttribute("open");
		});
	}

	const MQ = matchMedia("(min-width: 64em");

	if (MQ.matches) {
		open();
	}

	MQ.addEventListener("change", (e) => {
		e.matches ? open() : close();
	});
</script>
